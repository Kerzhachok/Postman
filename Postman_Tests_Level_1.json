{
	"info": {
		"_postman_id": "1514c48a-5e20-47eb-a934-7be9767d0ad2",
		"name": "HW2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"// 3. Проверить, что в body приходит правильный string",
							"pm.test(\"Body is string\", function () {",
							"    pm.expect(pm.response.text()).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Alex&age=31&salary=100",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json",
							"var respData = pm.response.json();",
							"",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Response name = Request name\", () => {",
							"    pm.expect(respData.name).to.be.eql(\"Olga\");",
							"});",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Response age = Request age\", () => {",
							"    pm.expect(respData.age).to.be.eql(\"34\");",
							"})",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Request salary = Response salary\", () => {",
							"    pm.expect(respData.salary).to.be.eql(1500);",
							"})",
							"",
							"//7. Спарсить request. ",
							"var reqData = request.data;",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Response name = Parsed request name\", () => {",
							"    pm.expect(respData.name).to.be.eql(reqData.name);",
							"});",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Response age = Parsed request age\", () => {",
							"    pm.expect(respData.age).to.be.eql(reqData.age);",
							"})",
							"",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Request salary = Parsed request salary\", () => {",
							"    pm.expect(respData.salary).to.be.eql(+reqData.salary);",
							"})",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"console.log(respData.family)",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"u_salary_1_5_year = salary*4\", () => {",
							"    pm.expect(respData.family.u_salary_1_5_year).to.be.eql(reqData.salary*4);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"// 3. Спарсить response body в json.",
							"var respData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"var reqData = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test (\"Name\", () => {",
							"    pm.expect(respData.name).to.be.eql(reqData.name)",
							"})",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test (\"Age\", () => {",
							"    pm.expect(respData.age).to.be.eql(reqData.age)",
							"})",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Salary\", () => {",
							"    pm.expect(respData.salary).to.be.eql(+reqData.salary)",
							"})",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(respData.family)",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog has NAME\", () => {",
							"    pm.expect(respData.family.pets.dog).to.has.property(\"name\")",
							"})",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog has AGE\", () => {",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"age\")",
							"})",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Name is LUKY\", () => {",
							"    pm.expect(respData.family.pets.dog.name).to.be.eql(\"Luky\")",
							"})",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Age is 4\", () => {",
							"    pm.expect(respData.family.pets.dog.age).to.be.eql(4)",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=olga&age=25&salary=100",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "olga"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"// 3. Спарсить response body в json.",
							"var respData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"var reqData = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name\", () => {",
							"    pm.expect(respData.name).to.be.eql(reqData.name)",
							"})",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Age\", () => {",
							"    pm.expect(respData.age).to.be.eql(+reqData.age)",
							"})",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(reqData.salary)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(respData.salary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(respData.salary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(respData.salary[1])",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(respData.salary[2])",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"salary0\", () => {",
							"    pm.expect(respData.salary[0]).to.be.eql(+reqData.salary)",
							"})",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"salary1\", () => {",
							"    pm.expect(+respData.salary[1]).to.be.eql(reqData.salary*2)",
							"})",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"salary2\", () => {",
							"    pm.expect(+respData.salary[2]).to.be.eql(reqData.salary*3)",
							"})",
							"",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", reqData.name);",
							"",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", reqData.age);",
							"",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", reqData.salary);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (s = 0; s < respData.salary.length; s++) {",
							"    console.log(\"Loop!\", respData.salary[s])",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Alex&age=31&salary=100",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"// 6. Спарсить response body в json.",
							"var respData = pm.response.json();",
							"",
							"// 7. Спарсить request.",
							"var reqData = request.data",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"resp has start_qa_salary\", () => {",
							"    pm.expect(respData).to.has.property(\"start_qa_salary\")",
							"})",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"resp has qa_salary_after_6_months\", () => {",
							"    pm.expect(respData).to.has.property(\"qa_salary_after_6_months\")",
							"})",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"resp has qa_salary_after_12_months\", () => {",
							"    pm.expect(respData).to.has.property(\"qa_salary_after_12_months\")",
							"})",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"respData has qa_salary_after_1.5_year\", () => {",
							"    pm.expect(respData).to.has.property(\"qa_salary_after_1.5_year\")",
							"})",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"respData has qa_salary_after_3.5_years\", () => {",
							"    pm.expect(respData).to.has.property(\"qa_salary_after_3.5_years\")",
							"})",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"respData has person\", () => {",
							"    pm.expect(respData).to.has.property(\"person\")",
							"})",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"start_qa_salary равен salary из request\", () => {",
							"    pm.expect(respData.start_qa_salary).to.be.eql(+reqData.salary)",
							"})",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months равен salary*2 из request\", () => {",
							"    pm.expect(respData.qa_salary_after_6_months).to.be.eql(+reqData.salary*2)",
							"})",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request\", () => {",
							"    pm.expect(respData.qa_salary_after_12_months).to.be.eql(+reqData.salary*2.7)",
							"})",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3 из request\", () => {",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.be.eql(+reqData.salary*3.3)",
							"})",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8 из request\", () => {",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.be.eql(+reqData.salary*3.8)",
							"})",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"в параметре person, 1-й элемент из u_name равен salary из request\", () => {",
							"    pm.expect(respData.person.u_name[1]).to.be.eql(+reqData.salary)",
							"})",
							"",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"параметр u_age равен age из request\", () => {",
							"    pm.expect(respData.person.u_age).to.be.eql(+reqData.age)",
							"})",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"параметр u_salary_5_years равен salary*4.2 из request\", () => {",
							"    pm.expect(respData.person.u_salary_5_years).to.be.eql(+reqData.salary*4.2)",
							"})",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (var p in respData.person) {",
							"    console.log(\"Loop!\", p, respData.person[p]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}
